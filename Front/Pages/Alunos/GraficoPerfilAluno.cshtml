@model Front.Pages.PerfilAlunoModel

@using Microsoft.AspNetCore.Http
@using Front.Models
@using System.Globalization



<header class="linha welcome" style=" gap: 16px; width: 100%; height: fit-content; justify-content: space-between;">

    <!--NOME E FAVORITOS-->
    <div class="linha welcome" style=" gap: 16px; width: 100%; height: fit-content; flex: 1; align-items: center ">

        <div class="iconAzul02">
            <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
        </div>

        <div class="coluna" style="--gap: 10px">
            <span class="SubH1 corAzul">Perfil do Aluno</span>
            <div class="linha" style="align-items: center">
                <h1 class="corPreta40B">@Model.User.name</h1>
                <input type="checkbox" style="display: none" id="favCurso" @(FavoritoService.EhFavorito(@Model.User.name) ? "checked" : "")
                       onchange="alunoFavorito(this)" />
                <label for="favCurso">
                    <img id="imgFavCurso" src="@Url.Content(FavoritoService.EhFavorito(@Model.User.user_id) ? "~/css/icons/estrela.svg" : "~/css/icons/estrela_inativa.svg")" height="20" />
                </label>
            </div>

        </div>

    </div>

    <!--ENGAJAMENTO, ULTIMO ACESSO E CURSOS-->
    <div class="linha QuadroCards" style="gap: 48px;">


        <div class="linha engag" style="flex: 1; align-items: center">
            @if (Model.Engajamento < 33)
            {
                <div class="iconVermelho">
                    <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Baixo</h5>
                    <h2 class="corVermelha">@Model.Engajamento%</h2>
                </div>
            }
            else if (Model.Engajamento < 66)
            {
                <div class="iconAzul">
                    <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Médio</h5>
                    <h2 class="corAzul">@Model.Engajamento%</h2>
                </div>
            }
            else
            {
                <div class="iconVerde">
                    <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Alto</h5>
                    <h2 class="corVerde">@Model.Engajamento%</h2>
                </div>
            }
        </div>


        <div class="coluna" style="--gap: 8px">
            @if (Model.AlunoLogs.Any())
            {
                DateTime ultimo_acesso = DateTime.Parse(Model.User.user_lastaccess);
                <h5 class="corCinza60B">
                    <span class="corCinza80B">Último Acesso:</span> Dia @ultimo_acesso.Day de @ultimo_acesso.ToString("MMMM") às @ultimo_acesso.Hour:@ultimo_acesso.Minute
                </h5>

                <form method="get" class="linha" style="align-items: center">
                    <h5 class="corCinza80B">Com base em: </h5>
                    <select class="cursoComboBox" name="curso" onchange="this.form.submit()">
                        <option value="">Todos os cursos</option>
                        @foreach (var curso in Model.ListaDeCursos)
                        {
                            <option value="@curso" selected="@(curso == Context.Request.Query["curso"])">@curso</option>
                        }
                    </select>
                </form>
            }

        </div>

    </div>

</header>

<div class="dashboard coluna" style="--gap: 16px">


    <!--IMPUT DA IA-->
    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg" alt="ÍconeHome" width="18" height="18" />
        <input type="text" id="IaPergunta" name="Prompt" placeholder="Pergunte à IA!" />
        <button onclick="enviarPergunta()">Gerar</button>
    </div>

    @{
        var abaSelecionada = Context.Request.Query["aba"].ToString();
        if (string.IsNullOrEmpty(abaSelecionada)) abaSelecionada = "1";
    }

    <div class="abas">
        <input type="radio" name="aba" id="aba1" @(abaSelecionada == "1" ? "checked" : "") />
        <input type="radio" name="aba" id="aba2" @(abaSelecionada == "2" ? "checked" : "") />


        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Calendário</label>
            <div class="underline"></div>
        </div>

        <div class="conteudos">

            <!--DASHBORD-->
            <div class="conteudo" id="conteudo1" style="flex-direction: row">

                <div class="QuadroCards GraficoEvolucao linha" style="flex: 1; --gap: 16px">
                    <!--GRÁFICO DE BARRA-->
                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Evolução</h4>
                        </div>
                        <canvas id="graficoLogs"></canvas>
                    </div>

                    <!--GRÁFICO DE BARRA-->
                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/GraficoPizza.svg" />
                            <h4 class="corPreta50B">Ações Realizadas</h4>
                        </div>
                        <div style="max-width: 400px; margin: auto; position: relative;">
                            <canvas id="graficoPizza" width="900" height="240"></canvas>
                        </div>
                    </div>
                </div>

                <div class="QuadroCards coluna Unidades">

                    <div class="linha" style="--gap: 10px; align-items: center">
                        <img src="~/css/icons/caderno.svg" />
                        <h4 class="corPreta50B">Anotações</h4>
                    </div>

                </div>
            </div>
            <div id="spinner" style="display:none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000;">
                <img src="~/css/icons/loadGif.gif" alt="Carregando..." width="40" />
            </div>
            <div class="conteudo" id="conteudo2">
                @await Html.PartialAsync("Alunos/Calendario", Model.Calendario)
            </div>
        </div>
    </div>
</div>

<script>
    const coresClaro = ['#002899', '#0036cc', '#99b4ff', '#ccd9ff', '#e0eaff'];
    const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799', '#555555'];
    const toggle = document.getElementById('toggleTheme');
    const ctxBarras = document.getElementById('graficoLogs')?.getContext('2d');
    const ctxPizza = document.getElementById('graficoPizza')?.getContext('2d');
    let graficoBarras, graficoPizza;


                    async function alunoFavorito(checkbox) {
                    const checked = checkbox.checked;
                    const aluno = '@Model.User.user_id';
                    const nome = '@Model.User.name';
                    const img = document.getElementById('imgFavCurso');

                    // Trocar a imagem já no clique
                    img.src = checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';

                    const url = checked
                    ? `/api/favoritos/adicionar_aluno?name=${encodeURIComponent(nome)}&id=${encodeURIComponent(aluno)}`
                    : `/api/favoritos/remover_aluno?name=${encodeURIComponent(nome)}&id=${encodeURIComponent(aluno)}`;

                    try {
                    const response = await fetch(url, { method: 'POST' });
                    if (!response.ok) {
                    alert('Erro ao atualizar favoritos');
                    checkbox.checked = !checked;
                    img.src = checkbox.checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';
                    }
                    } catch (err) {
                    alert('Erro na requisição');
                    checkbox.checked = !checked;
                    img.src = checkbox.checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';
                    }
                    }


                            function enviarPergunta() {
            const input = document.getElementById('IaPergunta');
            const pergunta = input.value.trim();


            const userId = '@Model.User.user_id';
            const url = `/IaChatAluno/${encodeURIComponent(userId)}?Prompt=${encodeURIComponent(pergunta)}`;
            window.location.href = url;
        }

    // --------- GRÁFICOS ---------
    function criarGraficos() {
        const isDarkMode = document.documentElement.classList.contains('dark');
        const cores = isDarkMode ? coresEscuro : coresClaro;
        const corTexto = '#8F98B2';

        const anos = @Html.Raw(Model.AnosJson);
        const semanas = @Html.Raw(Model.SemanasJson);
        const chartData = {
            labels: @Html.Raw(Model.LblJson),
            datasets: @Html.Raw(Model.DsJson)
        };

        chartData.datasets.forEach((ds, i) => {
            ds.backgroundColor = cores[i % cores.length];
            ds.borderWidth = 0;
        });

        const totaisPorSemana = chartData.labels.map((_, i) =>
            chartData.datasets.reduce((soma, ds) => soma + ds.data[i], 0)
        );

        if (ctxBarras) {
            if (graficoBarras) graficoBarras.destroy();
            graficoBarras = new Chart(ctxBarras, {
                type: 'bar',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            callbacks: {
                                title: ctx => `(${getDateRange(anos[ctx[0].dataIndex], semanas[ctx[0].dataIndex])})`,
                                label: ctx => {
                                    const valor = ctx.parsed.y;
                                    if (valor === 0) return null;
                                    const total = totaisPorSemana[ctx.dataIndex];
                                    const pct = total ? ((valor / total) * 100).toFixed(1) : 0;
                                    return `${ctx.dataset.label}: ${valor} (${pct}%)`;
                                }
                            }
                        },
                        legend: { display: false }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            ticks: { color: corTexto, font: { size: 10, weight: '500' } },
                            grid: { display: false }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                color: corTexto,
                                font: { size: 10, weight: '500' },
                                callback: val => {
                                    const max = Math.max(...totaisPorSemana);
                                    return max ? `${((val / max) * 100).toFixed(0)}%` : '0%';
                                }
                            },
                            grid: { display: false }
                        }
                    }
                }
            });
        }

        if (ctxPizza) {
            if (graficoPizza) graficoPizza.destroy();

            const totalAcoes = @Model.AcoesResumo.Sum(a => a.Quantidade);
            const totalLog = @Model.AlunoLogs.Count;
            const quantidadeOutros = totalLog - totalAcoes;

            const acoesComOutros = [
    @foreach (var acao in Model.AcoesResumo)
    {
        @: { label: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(acao.Acao)), quantidade: @acao.Quantidade },
    }
            ];

            if (quantidadeOutros > 0) {
                acoesComOutros.push({ label: 'Outros', quantidade: quantidadeOutros });
            }

            const labelsPizza = acoesComOutros.map(a => a.label);
            const dadosPizza = acoesComOutros.map(a => a.quantidade);

            graficoPizza = new Chart(ctxPizza, {
                type: 'doughnut',
                data: {
                    labels: labelsPizza,
                    datasets: [{
                        data: dadosPizza,
                        backgroundColor: cores.slice(0, labelsPizza.length),
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    rotation: 270,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'rectRounded',
                                color: corTexto,
                                font: { size: 14, family: 'Inter' },
                                padding: 20,
                                boxWidth: 12,
                                generateLabels: function (chart) {
                                    const data = chart.data;
                                    const backgroundColors = data.datasets[0].backgroundColor;

                                    return data.labels.map((label, i) => ({
                                        text: `${label} (${data.datasets[0].data[i]})`,
                                        fillStyle: backgroundColors[i],
                                        strokeStyle: backgroundColors[i],
                                        index: i,
                                        fontColor: corTexto,
                                        pointStyle: 'rectRounded',
                                        boxWidth: 12,
                                        hidden: chart.getDatasetMeta(0).data[i]?.hidden ?? false,
                                    }));
                                }
                            },
                                onClick: (e, legendItem) => {
                                    const index = legendItem.index;

                                    // Toggle na pizza
                                    const metaPizza = graficoPizza.getDatasetMeta(0).data[index];
                                    metaPizza.hidden = !metaPizza.hidden;
                                    graficoPizza.update();

                                    // Toggle na barra
                                    const dsBarra = graficoBarras.data.datasets[index];
                                    if (dsBarra) {
                                        dsBarra.hidden = !dsBarra.hidden;
                                        graficoBarras.update();
                                    }
                                }
                        }
                    }
                },
                plugins: [{
                    id: 'centerText',
                    beforeDraw(chart) {
                        const { ctx, chartArea: { left, right, top, bottom } } = chart;
                        const x = (left + right) / 2;
                        const y = (top + bottom) / 2;
                        ctx.save();
                        ctx.font = 'bold 16px Inter';
                        ctx.fillStyle = corTexto;
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText(`${dadosPizza.reduce((a, b) => a + b, 0)} Ações`, x, y);
                        ctx.restore();
                    }
                }]
            });
        }
    }

    function getDateRange(year, week) {
        const base = new Date(year, 0, 1 + (week - 1) * 7);
        const dow = base.getDay();
        const start = new Date(base);
        start.setDate(base.getDate() - dow + (dow <= 4 ? 1 : 8));
        const end = new Date(start);
        end.setDate(start.getDate() + 6);
        const f = d => d.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
        return `${f(start)} à ${f(end)}`;
    }

    // --------- INICIALIZAÇÃO ---------
    if (localStorage.getItem('theme') === 'dark') {
        document.documentElement.classList.add('dark');
        if (toggle) toggle.checked = true;
    }

    criarGraficos();

    if (toggle) {
        toggle.addEventListener('change', function () {
            document.documentElement.classList.toggle('dark', this.checked);
            localStorage.setItem('theme', this.checked ? 'dark' : 'light');
            criarGraficos();
        });
    }
</script>

<script>
    const cores = {
        claro: ['#002899', '#0036cc', '#99b4ff', '#ccd9ff', '#e0eaff'],
        escuro: ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799', '#555555']
    };

    let graficoBarras, graficoPizza;

    function getDateRange(year, week) {
        const base = new Date(year, 0, 1 + (week - 1) * 7);
        const dow = base.getDay();
        const start = new Date(base.setDate(base.getDate() - dow + (dow <= 4 ? 1 : 8)));
        const end = new Date(start);
        end.setDate(start.getDate() + 6);
        return `${start.toLocaleDateString('pt-BR')} à ${end.toLocaleDateString('pt-BR')}`;
    }

    document.addEventListener('DOMContentLoaded', () => {
        const ctxBarras = document.getElementById('graficoLogs')?.getContext('2d');
        const ctxPizza = document.getElementById('graficoPizza')?.getContext('2d');
        const toggle = document.getElementById('toggleTheme');
        const userId = '@Model.User.user_id';
        const userName = '@Model.User.name';
        const imgFav = document.getElementById('imgFavCurso');
        const inputPergunta = document.getElementById('IaPergunta');

        function criarGraficos() {
            const isDark = document.documentElement.classList.contains('dark');
            const paleta = isDark ? cores.escuro : cores.claro;
            const corTexto = '#8F98B2';

            const anos = @Html.Raw(Model.AnosJson);
            const semanas = @Html.Raw(Model.SemanasJson);
            const chartData = {
                labels: @Html.Raw(Model.LblJson),
                datasets: @Html.Raw(Model.DsJson)
            };

            const totaisPorSemana = chartData.labels.map((_, i) =>
                chartData.datasets.reduce((soma, ds) => soma + ds.data[i], 0)
            );

            chartData.datasets.forEach((ds, i) => {
                ds.backgroundColor = paleta[i % paleta.length];
                ds.borderWidth = 0;
            });

            // Gráfico de barras
            if (ctxBarras) {
                if (graficoBarras) graficoBarras.destroy();
                graficoBarras = new Chart(ctxBarras, {
                    type: 'bar',
                    data: chartData,
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                mode: 'index',
                                callbacks: {
                                    title: ctx => `(${getDateRange(anos[ctx[0].dataIndex], semanas[ctx[0].dataIndex])})`,
                                    label: ctx => {
                                        const valor = ctx.parsed.y;
                                        if (valor === 0) return null;
                                        const total = totaisPorSemana[ctx.dataIndex];
                                        const pct = total ? ((valor / total) * 100).toFixed(1) : 0;
                                        return `${ctx.dataset.label}: ${valor} (${pct}%)`;
                                    }
                                }
                            },
                            legend: { display: false }
                        },
                        scales: {
                            x: {
                                stacked: true,
                                ticks: { color: corTexto, font: { size: 10, weight: '500' } },
                                grid: { display: false }
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true,
                                ticks: {
                                    color: corTexto,
                                    font: { size: 10, weight: '500' },
                                    callback: val => {
                                        const max = Math.max(...totaisPorSemana);
                                        return max ? `${((val / max) * 100).toFixed(0)}%` : '0%';
                                    }
                                },
                                grid: { display: false }
                            }
                        }
                    }
                });
            }

            // Gráfico de pizza
            if (ctxPizza) {
                if (graficoPizza) graficoPizza.destroy();

                const totalAcoes = @Model.AcoesResumo.Sum(a => a.Quantidade);
                const totalLog = @Model.AlunoLogs.Count;
                const quantidadeOutros = totalLog - totalAcoes;

                const acoesComOutros = [
    @foreach (var acao in Model.AcoesResumo)
    {
        @: { label: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(acao.Acao)), quantidade: @acao.Quantidade },
    }
                ];

                if (quantidadeOutros > 0) {
                    acoesComOutros.push({ label: 'Outros', quantidade: quantidadeOutros });
                }

                const labelsPizza = acoesComOutros.map(a => a.label);
                const dadosPizza = acoesComOutros.map(a => a.quantidade);

                graficoPizza = new Chart(ctxPizza, {
                    type: 'doughnut',
                    data: {
                        labels: labelsPizza,
                        datasets: [{
                            data: dadosPizza,
                            backgroundColor: paleta.slice(0, labelsPizza.length),
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        rotation: 270,
                        cutout: '70%',
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    usePointStyle: true,
                                    pointStyle: 'rectRounded',
                                    color: corTexto,
                                    font: { size: 14, family: 'Inter' },
                                    padding: 20,
                                    boxWidth: 12,
                                    generateLabels: chart => {
                                        const { data } = chart;
                                        const cores = data.datasets[0].backgroundColor;
                                        return data.labels.map((label, i) => ({
                                            text: `${label} (${data.datasets[0].data[i]})`,
                                            fillStyle: cores[i],
                                            strokeStyle: cores[i],
                                            index: i,
                                            hidden: chart.getDatasetMeta(0).data[i]?.hidden ?? false,
                                            pointStyle: 'rectRounded',
                                            boxWidth: 12
                                        }));
                                    }
                                },
                                onClick: (e, legendItem) => {
                                    const index = legendItem.index;
                                    const metaPizza = graficoPizza.getDatasetMeta(0).data[index];
                                    metaPizza.hidden = !metaPizza.hidden;
                                    graficoPizza.update();

                                    const dsBarra = graficoBarras?.data.datasets[index];
                                    if (dsBarra) {
                                        dsBarra.hidden = !dsBarra.hidden;
                                        graficoBarras.update();
                                    }
                                }
                            }
                        }
                    },
                    plugins: [{
                        id: 'centerText',
                        beforeDraw(chart) {
                            const { ctx, chartArea: { left, right, top, bottom } } = chart;
                            const x = (left + right) / 2;
                            const y = (top + bottom) / 2;
                            ctx.save();
                            ctx.font = 'bold 16px Inter';
                            ctx.fillStyle = corTexto;
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.fillText(`${dadosPizza.reduce((a, b) => a + b, 0)} Ações`, x, y);
                            ctx.restore();
                        }
                    }]
                });
            }
        }

        // Tema inicial
        if (localStorage.getItem('theme') === 'dark') {
            document.documentElement.classList.add('dark');
            toggle?.checked = true;
        }

        criarGraficos();

        toggle?.addEventListener('change', e => {
            const dark = e.target.checked;
            document.documentElement.classList.toggle('dark', dark);
            localStorage.setItem('theme', dark ? 'dark' : 'light');
            criarGraficos();
        });

        // Favoritar
        window.alunoFavorito = async checkbox => {
            const { checked } = checkbox;
            imgFav.src = `/css/icons/${checked ? 'estrela.svg' : 'estrela_inativa.svg'}`;
            const url = `/api/favoritos/${checked ? 'adicionar_aluno' : 'remover_aluno'}?name=${encodeURIComponent(userName)}&id=${encodeURIComponent(userId)}`;

            try {
                const res = await fetch(url, { method: 'POST' });
                if (!res.ok) throw new Error();
            } catch {
                alert('Erro ao atualizar favoritos');
                checkbox.checked = !checked;
                imgFav.src = `/css/icons/${checkbox.checked ? 'estrela.svg' : 'estrela_inativa.svg'}`;
            }
        };

        // Enviar pergunta para IA
        window.enviarPergunta = () => {
            const pergunta = inputPergunta.value.trim();
            if (!pergunta) return inputPergunta.focus();
            window.location.href = `/IaChatAluno/${encodeURIComponent(userId)}?Prompt=${encodeURIComponent(pergunta)}`;
        };
    });
</script>


