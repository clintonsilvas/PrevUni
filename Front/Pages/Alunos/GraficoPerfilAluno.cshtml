@model Front.Pages.PerfilAlunoModel

@using Microsoft.AspNetCore.Http
@using Front.Models
@using System.Globalization



<header class="linha welcome" style=" gap: 16px; width: 100%; height: fit-content; justify-content: space-between;">

    <!--NOME E FAVORITOS-->
    <div class="linha welcome" style=" gap: 16px; width: 100%; height: fit-content; flex: 1; align-items: center ">

        <div class="iconAzul02">
            <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
        </div>

        <div class="coluna" style="--gap: 10px">
            <span class="SubH1 corAzul">Perfil do Aluno</span>
            <div class="linha" style="align-items: center">
                <h1 class="corPreta40B">@Model.User.name</h1>
                <input type="checkbox" style="display: none" id="favCurso" @(FavoritoService.EhFavorito(@Model.User.name) ? "checked" : "")
                       onchange="alunoFavorito(this)" />
                <label for="favCurso">
                    <img id="imgFavCurso" src="@Url.Content(FavoritoService.EhFavorito(@Model.User.user_id) ? "~/css/icons/estrela.svg" : "~/css/icons/estrela_inativa.svg")" height="20" />
                </label>
            </div>

        </div>

    </div>

    <!--ENGAJAMENTO, ULTIMO ACESSO E CURSOS-->
    <div class="linha QuadroCards" style="gap: 48px;">


        <div class="linha engag" style="flex: 1; align-items: center">
            @if (Model.Engajamento < 33)
            {
                <div class="iconVermelho">
                    <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Baixo</h5>
                    <h2 class="corVermelha">@Model.Engajamento%</h2>
                </div>
            }
            else if (Model.Engajamento < 66)
            {
                <div class="iconAzul">
                    <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Médio</h5>
                    <h2 class="corAzul">@Model.Engajamento%</h2>
                </div>
            }
            else
            {
                <div class="iconVerde">
                    <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 4px">
                    <h5 class="corCinza80B">Engajamento Alto</h5>
                    <h2 class="corVerde">@Model.Engajamento%</h2>
                </div>
            }
        </div>


        <div class="coluna" style="--gap: 8px">
            @if (Model.AlunoLogs.Any())
            {
                DateTime ultimo_acesso = DateTime.Parse(Model.User.user_lastaccess);
                <h5 class="corCinza60B">
                    <span class="corCinza80B">Último Acesso:</span> Dia @ultimo_acesso.Day de @ultimo_acesso.ToString("MMMM") às @ultimo_acesso.Hour:@ultimo_acesso.Minute
                </h5>

                <form method="get" class="linha" style="align-items: center">
                    <h5 class="corCinza80B">Com base em: </h5>
                    <select class="cursoComboBox" name="curso" onchange="this.form.submit()">
                        <option value="">Todos os cursos</option>
                        @foreach (var curso in Model.ListaDeCursos)
                        {
                            <option value="@curso" selected="@(curso == Context.Request.Query["curso"])">@curso</option>
                        }
                    </select>
                </form>
            }

        </div>

    </div>

</header>

<div class="dashboard coluna" style="--gap: 16px">


    <!--IMPUT DA IA-->
    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg" alt="ÍconeHome" width="18" height="18" />
        <input type="text" id="IaPergunta" name="Prompt" placeholder="Pergunte à IA!" />
        <a href="#" onclick="enviarPergunta()">Gerar</a>
    </div>

    @{
        var abaSelecionada = Context.Request.Query["aba"].ToString();
        if (string.IsNullOrEmpty(abaSelecionada)) abaSelecionada = "1";
    }

    <div class="abas">
        <input type="radio" name="aba" id="aba1" @(abaSelecionada == "1" ? "checked" : "") />
        <input type="radio" name="aba" id="aba2" @(abaSelecionada == "2" ? "checked" : "") />


        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Calendário</label>
            <div class="underline"></div>
        </div>

        <div class="conteudos">

            <!--DASHBORD-->
            <div class="conteudo" id="conteudo1" style="flex-direction: row">

                <div class="QuadroCards GraficoEvolucao linha" style="flex: 1; --gap: 16px">
                    <!--GRÁFICO DE BARRA-->
                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Evolução</h4>
                        </div>
                        <canvas id="graficoLogs"></canvas>
                    </div>

                    <!--GRÁFICO DE BARRA-->
                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/GraficoPizza.svg" />
                            <h4 class="corPreta50B">Ações Realizadas</h4>
                        </div>
                        <div style="max-width: 400px; margin: auto; position: relative;">
                            <canvas id="graficoPizza" width="900" height="240"></canvas>
                        </div>
                    </div>
                </div>

                <div class="QuadroCards coluna Unidades">

                    <div class="linha" style="--gap: 10px; align-items: center">
                        <img src="~/css/icons/caderno.svg" />
                        <h4 class="corPreta50B">Anotações</h4>
                    </div>

                </div>
            </div>

            <div class="conteudo" id="conteudo2">
                <div class="calendario-logs QuadroCards" id="calendario">
                    @{
                        int mes = Convert.ToInt32(Context.Request.Query["mes"]) == 0 ? DateTime.Now.Month : Convert.ToInt32(Context.Request.Query["mes"]);
                        int ano = Convert.ToInt32(Context.Request.Query["ano"]) == 0 ? DateTime.Now.Year : Convert.ToInt32(Context.Request.Query["ano"]);

                        var primeiroDiaMes = new DateTime(ano, mes, 1);
                        int diasNoMes = DateTime.DaysInMonth(ano, mes);
                        int diasAtePrimeiroDia = (int)primeiroDiaMes.DayOfWeek;

                        var logsPorDia = Model.AlunoLogs?
                        .GroupBy(l => DateTime.Parse(l.date).Date)
                        .ToDictionary(g => g.Key, g => g.ToList())
                        ?? new();
                    }

                    <div class="navegacao-mes linha" style="flex: 1; margin-bottom: 20px; align-items: center">
                        @{
                            var mesAno = primeiroDiaMes.ToString("MMMM yyyy");
                            var mesAnoCapitalizado = char.ToUpper(mesAno[0]) + mesAno[1..];
                        }
                        <div class="linha" style="--gap: 10px; align-items: center; margin-right: auto">
                            <img src="~/css/icons/calendario.svg" height="20" />
                            <h3 class="corPreta50B" style="flex: 1;">@mesAnoCapitalizado</h3>
                        </div>

                        <div class="linha" style="gap: 8px">
                            <button class="btn_seta" onclick="mudarMes(-1)">⟵</button>
                            <button class="btn_seta" onclick="mudarMes(1)">⟶</button>
                        </div>
                    </div>

                    <div class="grid-calendario2">
                        @foreach (var dia in new[] { "Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sabado" })
                        {
                            <span class="NomeDiaSemana">@dia</span>
                        }

                        @for (int j = 0; j < diasAtePrimeiroDia; j++)
                        {
                            <div class="diaMesInativo"></div>
                        }

                        @for (int i = 1; i <= diasNoMes; i++)
                        {
                            var dataAtual = new DateTime(ano, mes, i);
                            var id = $"{dataAtual.Day}_{dataAtual.Month}";
                            var possuiLog = logsPorDia.ContainsKey(dataAtual);
                            var logsDoDia = possuiLog ? logsPorDia[dataAtual] : null;

                            <div id="@id" onclick="AbreDia('@id')" class="diaMes @(possuiLog ? "temLog" : "")">
                                <div class="linha">
                                    <span class="diaspan" style="flex: 1">@i</span>

                                    @if (possuiLog)
                                    {

                                        var totalLogs = logsDoDia.Count(l =>
                                        @Model.AcaoDe(l.action, l.target, l.component) != "Outros");

                                        if (totalLogs > 1)
                                        {
                                            <span class="mais_dia">+<span>@(totalLogs - 1)</span></span>
                                        }
                                    }
                                </div>

                                @if (possuiLog)
                                {
                                    foreach (var log in logsDoDia)
                                    {
                                        string? acao = @Model.AcaoDe(log.action, log.target, log.component);

                                        if (acao != null && acao != "Outros")
                                        {
                                            <div class="item-log">
                                                <span class="acao">@acao</span>
                                                <span class="acao">@DateTime.Parse(log.date).ToString("HH:mm")</span>
                                                <span class="curso">@log.course_fullname</span>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        const userId = '@Model.User.user_id';
        const userName = '@Model.User.name';
        const toggle = document.getElementById('toggleTheme');
        const ctxBarras = document.getElementById('graficoLogs')?.getContext('2d');
        const ctxPizza = document.getElementById('graficoPizza')?.getContext('2d');
        const imgFav = document.getElementById('imgFavCurso');
        const inputPergunta = document.getElementById('IaPergunta');

        const coresClaro = ['#002899', '#0036cc', '#99b4ff', '#ccd9ff', '#e0eaff'];
        const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799', '#555555'];

        // Variáveis globais dos gráficos para poder destruir antes de recriar
        let graficoBarras = null;
        let graficoPizza = null;

            console.log('anos:', anos);
    console.log('semanas:', semanas);
    console.log('labels:', chartData.labels);
    console.log('datasets:', chartData.datasets);

        // Função auxiliar para pegar intervalo da semana
        function getDateRange(year, week) {
            const base = new Date(year, 0, 1 + (week - 1) * 7);
            const dow = base.getDay();
            const start = new Date(base.setDate(base.getDate() - dow + (dow <= 4 ? 1 : 8)));
            const end = new Date(start);
            end.setDate(start.getDate() + 6);
            return `${start.toLocaleDateString('pt-BR')} à ${end.toLocaleDateString('pt-BR')}`;
        }

        // Função que cria e atualiza os gráficos
        function criarGraficos() {
            if (!ctxBarras) return console.warn('Canvas gráfico barras não encontrado.');
            if (!ctxPizza) return console.warn('Canvas gráfico pizza não encontrado.');

            const isDarkMode = document.documentElement.classList.contains('dark');
            const cores = isDarkMode ? coresEscuro : coresClaro;
            const corTexto = '#8F98B2';

            // Dados do Razor, já parseados em JS nativo com Json.Raw
            const anos = @Html.Raw(Model.AnosJson ?? "[]");
            const semanas = @Html.Raw(Model.SemanasJson ?? "[]");
            const chartData = {
                labels: @Html.Raw(Model.LblJson ?? "[]"),
                datasets: @Html.Raw(Model.DsJson ?? "[]")
            };

            // Se não tiver dados, sai
            if (!chartData.labels.length || !chartData.datasets.length) {
                console.warn('Dados do gráfico incompletos.');
                return;
            }

            // Define cores dos datasets
            chartData.datasets.forEach((ds, i) => {
                ds.backgroundColor = cores[i % cores.length];
                ds.borderWidth = 0;
            });

            // Calcula totais para tooltips e escala Y
            const totaisPorSemana = chartData.labels.map((_, i) =>
                chartData.datasets.reduce((soma, ds) => soma + (ds.data[i] ?? 0), 0)
            );

            // Destroi gráficos antigos se existirem
            if (graficoBarras) graficoBarras.destroy();
            graficoBarras = new Chart(ctxBarras, {
                type: 'bar',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            callbacks: {
                                title: ctx => `(${getDateRange(anos[ctx[0].dataIndex], semanas[ctx[0].dataIndex])})`,
                                label: ctx => {
                                    const valor = ctx.parsed.y;
                                    if (valor === 0) return null;
                                    const total = totaisPorSemana[ctx.dataIndex];
                                    const pct = total ? ((valor / total) * 100).toFixed(1) : 0;
                                    return `${ctx.dataset.label}: ${valor} (${pct}%)`;
                                }
                            }
                        },
                        legend: { display: false }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            ticks: { color: corTexto, font: { size: 10, weight: '500' } },
                            grid: { display: false }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                color: corTexto,
                                font: { size: 10, weight: '500' },
                                callback: val => {
                                    const max = Math.max(...totaisPorSemana);
                                    return max ? `${((val / max) * 100).toFixed(0)}%` : '0%';
                                }
                            },
                            grid: { display: false }
                        }
                    }
                }
            });

            // --- Gráfico Pizza ---

            // Total ações e logs para cálculo do "Outros"
            const totalAcoes = @Model.AcoesResumo.Sum(a => a.Quantidade);
            const totalLog = @Model.AlunoLogs.Count;
            const quantidadeOutros = totalLog - totalAcoes;

            // Construir array com as ações + "Outros"
            const acoesComOutros = [
    @foreach (var acao in Model.AcoesResumo)
    {
        @: { label: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(acao.Acao)), quantidade: @acao.Quantidade },
    }
            ];

            if (quantidadeOutros > 0) {
                acoesComOutros.push({ label: 'Outros', quantidade: quantidadeOutros });
            }

            const labelsPizza = acoesComOutros.map(a => a.label);
            const dadosPizza = acoesComOutros.map(a => a.quantidade);

            if (graficoPizza) graficoPizza.destroy();
            graficoPizza = new Chart(ctxPizza, {
                type: 'doughnut',
                data: {
                    labels: labelsPizza,
                    datasets: [{
                        data: dadosPizza,
                        backgroundColor: cores.slice(0, labelsPizza.length),
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    rotation: 270,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'rectRounded',
                                color: corTexto,
                                font: { size: 14, family: 'Inter' },
                                padding: 20,
                                boxWidth: 12,
                                generateLabels: function (chart) {
                                    const data = chart.data;
                                    const backgroundColors = data.datasets[0].backgroundColor;

                                    return data.labels.map((label, i) => ({
                                        text: `${label} (${data.datasets[0].data[i]})`,
                                        fillStyle: backgroundColors[i],
                                        strokeStyle: backgroundColors[i],
                                        index: i,
                                        fontColor: corTexto,
                                        pointStyle: 'rectRounded',
                                        boxWidth: 12,
                                        hidden: chart.getDatasetMeta(0).data[i]?.hidden ?? false,
                                    }));
                                }
                            },
                            onClick: (e, legendItem) => {
                                const index = legendItem.index;

                                // Toggle fatias da pizza
                                const metaPizza = graficoPizza.getDatasetMeta(0).data[index];
                                metaPizza.hidden = !metaPizza.hidden;
                                graficoPizza.update();

                                // Toggle datasets da barra
                                const dsBarra = graficoBarras.data.datasets[index];
                                if (dsBarra) {
                                    dsBarra.hidden = !dsBarra.hidden;
                                    graficoBarras.update();
                                }
                            }
                        }
                    }
                },
                plugins: [{
                    id: 'centerText',
                    beforeDraw(chart) {
                        const { ctx, chartArea: { left, right, top, bottom } } = chart;
                        const x = (left + right) / 2;
                        const y = (top + bottom) / 2;
                        ctx.save();
                        ctx.font = 'bold 16px Inter';
                        ctx.fillStyle = corTexto;
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText(`${dadosPizza.reduce((a, b) => a + b, 0)} Ações`, x, y);
                        ctx.restore();
                    }
                }]
            });
        }

        // Tema inicial
        if (localStorage.getItem('theme') === 'dark') {
            document.documentElement.classList.add('dark');
            if (toggle) toggle.checked = true;
        }

        criarGraficos();

        // Evento para alternar tema e recriar gráficos
        toggle?.addEventListener('change', e => {
            const dark = e.target.checked;
            document.documentElement.classList.toggle('dark', dark);
            localStorage.setItem('theme', dark ? 'dark' : 'light');
            criarGraficos();
        });

        // Funções extras que o script usa podem ser adicionadas aqui, tipo enviarPergunta, alunoFavorito etc.
    });
</script>


<!--SCRIPT DO CALENDARIO-->
<script>
    function AbreDia(id) {
        const elemento = document.getElementById(id);
        if (!elemento) return console.warn('Elemento não encontrado:', id);

        const jaAberto = elemento.classList.contains('diaMesAberto');
        document.querySelectorAll('.diaMes, .diaMesAberto, .temLog').forEach(dia => {
            dia.className = dia.className.replace('diaMesAberto', 'diaMes').trim();
        });

        if (!jaAberto) elemento.className = 'diaMesAberto';
    }

    function mudarMes(direcao) {
        const urlParams = new URLSearchParams(window.location.search);
        let mes = parseInt(urlParams.get('mes')) || new Date().getMonth() + 1;
        let ano = parseInt(urlParams.get('ano')) || new Date().getFullYear();

        mes += direcao;
        if (mes < 1) { mes = 12; ano--; }
        if (mes > 12) { mes = 1; ano++; }

        urlParams.set('mes', mes);
        urlParams.set('ano', ano);
        window.location.href = window.location.pathname + '?' + urlParams + window.location.hash;
    }

    window.addEventListener('DOMContentLoaded', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const aba = urlParams.get('aba') || '1';
        const input = document.getElementById('aba' + aba);
        if (input) input.checked = true;

        document.querySelectorAll('.botoes label').forEach((label, i) => {
            label.addEventListener('click', () => {
                const params = new URLSearchParams(window.location.search);
                params.set('aba', (i + 1).toString());
                history.replaceState(null, '', window.location.pathname + '?' + params + window.location.hash);
            });
        });
    });
</script>

