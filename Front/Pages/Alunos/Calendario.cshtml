@model Front.Pages.CalendarioInfos
@{
}


<div class="calendario-logs QuadroCards" id="calendario">
    @{



        var primeiroDiaMes = new DateTime(Model.ano, Model.mes, 1);
        int diasNoMes = DateTime.DaysInMonth(Model.ano, Model.mes);
        int diasAtePrimeiroDia = (int)primeiroDiaMes.DayOfWeek;

        var logsPorDia = Model.logs?
        .GroupBy(l => DateTime.Parse(l.date).Date)
        .ToDictionary(g => g.Key, g => g.ToList())
        ?? new();
    }

    <div class="navegacao-mes linha" style="flex: 1; margin-bottom: 20px; align-items: center">
        @{
            var mesAno = primeiroDiaMes.ToString("MMMM yyyy");
            var mesAnoCapitalizado = char.ToUpper(mesAno[0]) + mesAno[1..];
        }
        <div class="linha" style="--gap: 10px; align-items: center; margin-right: auto">
            <img src="~/css/icons/calendario.svg" height="20" />
            <h3 class="corPreta50B" style="flex: 1;">@mesAnoCapitalizado</h3>
        </div>

        <div class="linha" style="gap: 8px">
            <button class="btn_seta" onclick="mudarMes(-1)">⟵</button>
            <button class="btn_seta" onclick="mudarMes(1)">⟶</button>
        </div>
    </div>

    <div class="grid-calendario2">
        @foreach (var dia in new[] { "Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sabado" })
        {
            <span class="NomeDiaSemana">@dia</span>
        }

        @for (int j = 0; j < diasAtePrimeiroDia; j++)
        {
            <div class="diaMesInativo"></div>
        }

        @for (int i = 1; i <= diasNoMes; i++)
        {
            var dataAtual = new DateTime(Model.ano, Model.mes, i);
            var id = $"{dataAtual.Day}_{dataAtual.Month}";
            var possuiLog = logsPorDia.ContainsKey(dataAtual);
            var logsDoDia = possuiLog ? logsPorDia[dataAtual] : null;

            <div id="@id" onclick="AbreDia('@id')" class="diaMes @(possuiLog ? "temLog" : "")">
                <div class="linha">
                    <span class="diaspan" style="flex: 1">@i</span>

                    @if (possuiLog)
                    {

                        var totalLogs = logsDoDia.Count(l =>
                        @Model.AcaoDe(l.action, l.target, l.component) != "Outros");

                        if (totalLogs > 1)
                        {
                            <span class="mais_dia">+<span>@(totalLogs - 1)</span></span>
                        }
                    }
                </div>

                @if (possuiLog)
                {
                    foreach (var log in logsDoDia)
                    {
                        string? acao = @Model.AcaoDe(log.action, log.target, log.component);

                        if (acao != null && acao != "Outros")
                        {
                            <div class="item-log">
                                <span class="acao">@acao</span>
                                <span class="acao">@DateTime.Parse(log.date).ToString("HH:mm")</span>
                                <span class="curso">@log.course_fullname</span>
                            </div>
                        }
                    }
                }
            </div>
        }
    </div>

</div>


<script>
    function AbreDia(id) {
        const elemento = document.getElementById(id);
        if (!elemento) return console.warn('Elemento não encontrado:', id);

        const jaAberto = elemento.classList.contains('diaMesAberto');
        document.querySelectorAll('.diaMes, .diaMesAberto, .temLog').forEach(dia => {
            dia.className = dia.className.replace('diaMesAberto', 'diaMes').trim();
        });

        if (!jaAberto) elemento.className = 'diaMesAberto';
    }
 let mes = @Model.mes;
    let ano = @Model.ano;

    function mudarMes(direcao) {
        const urlParams = new URLSearchParams(window.location.search);
        const path = window.location.pathname;
        const curso = urlParams.get('curso') ?? '';
        const userId = path.split('/').pop();

        mes += direcao;
        if (mes < 1) { mes = 12; ano--; }
        if (mes > 12) { mes = 1; ano++; }

        const novaUrl = `${window.location.pathname}?handler=CalendarioParcial&userId=${userId}&curso=${curso}&mes=${mes}&ano=${ano}`;

        document.getElementById('conteudo2').innerHTML = '';
        if (spinner) spinner.style.display = "flex"; // ou "block"

        fetch(novaUrl)
            .then(res => res.text())
            .then(html => {
                const conteudo = document.getElementById("conteudo2");
                if (conteudo) conteudo.innerHTML = html;
            })
            .catch(err => console.error("Erro ao carregar calendário:", err))
            .finally(() => {
                if (spinner) spinner.style.display = "none";
            });
    }


    window.addEventListener('DOMContentLoaded', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const aba = urlParams.get('aba') || '1';
        const input = document.getElementById('aba' + aba);
        if (input) input.checked = true;

        document.querySelectorAll('.botoes label').forEach((label, i) => {
            label.addEventListener('click', () => {
                const params = new URLSearchParams(window.location.search);
                params.set('aba', (i + 1).toString());
                history.replaceState(null, '', window.location.pathname + '?' + params + window.location.hash);
            });
        });
    });
</script>