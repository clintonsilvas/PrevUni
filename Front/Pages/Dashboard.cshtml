@page "{curso}"
@model Front.Pages.DashboardModel
@using Front.Models;
@{
    ViewData["Title"] = "Dashboard do Curso";
}


<header class="linha welcome"
        style="
            justify-content: space-between;
            width: 100%;
            height: fit-content;
">
    <div class="coluna" style="--gap: 10px">
        <span class="SubH1 corAzul">Dashboard do Curso</span>
        <div class="linha" style="align-items: center">
            <h1 class="corPreta40B">@Model.Cursos.nomeCurso</h1>
            <input type="checkbox" style="display: none" id="favCurso" @(FavoritoService.EhFavorito(Model.Cursos.nomeCurso) ? "checked" : "")
                   onchange="toggleFavorito(this)" />
            <label for="favCurso">
                <img id="imgFavCurso" src="@Url.Content(FavoritoService.EhFavorito(Model.Cursos.nomeCurso) ? "~/css/icons/estrela.svg" : "~/css/icons/estrela_inativa.svg")" height="20" />
            </label>
        </div>
    </div>
</header>


<div class="dashboard coluna" style="--gap: 10px">
    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg"
             alt="ÍconeHome"
             width="18"
             height="18" />
        <input type="text"
               id="IaPergunta"
               name="nome"
               placeholder="Pergunte a inteligência Artifical!" />
        <a asp-page="/IaChatCurso" asp-route-cursoNome="@Model.Cursos.nomeCurso">Gerar</a>
    </div>

    <div class="abas" id="us_cont">
        <div class="spinner"><img src="~/css/icons/loadGif.gif" alt="Carregando..." width="40" /></div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const curso = "@Model.Cursos.nomeCurso";
            const container = document.getElementById("us_cont");

            const res = await fetch(`/Dashboard/${curso}?handler=Carregamento`);
            const html = await res.text();
            container.innerHTML = html;

            const scripts = container.querySelectorAll("script");
            scripts.forEach(oldScript => {
                const newScript = document.createElement("script");
                if (oldScript.src) {
                    newScript.src = oldScript.src;
                    newScript.async = false;
                } else {
                    newScript.text = oldScript.textContent;
                }
                document.body.appendChild(newScript);
            });
        });
    </script>
</div>

<script>
    // --------- CONSTANTES ---------
    const iconeAtivo = '/css/icons/estrela.svg';
    const iconeInativo = '/css/icons/estrela_inativa.svg';
    // --------- FUNÇÕES FAVORITOS ---------
    async function toggleFavorito(checkbox) {
        const checked = checkbox.checked;
        const curso = @Html.Raw(Json.Serialize(Model.Cursos.nomeCurso));
        const img = document.getElementById('imgFavCurso');

        atualizarFavoritoVisual(checkbox, img);

        const url = checked
            ? `/api/favoritos/adicionar_curso?nomeCurso=${encodeURIComponent(curso)}`
            : `/api/favoritos/remover_curso?nomeCurso=${encodeURIComponent(curso)}`;

        try {
            const response = await fetch(url, { method: 'POST' });
            if (!response.ok) throw new Error();
        } catch {
            checkbox.checked = !checked;
            atualizarFavoritoVisual(checkbox, img);
            alert('Erro ao atualizar favoritos');
        }
    }

    function atualizarFavoritoVisual(checkbox, img) {
        img.src = checkbox.checked ? iconeAtivo : iconeInativo;
    }

</script>



