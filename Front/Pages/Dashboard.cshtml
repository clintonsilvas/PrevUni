@page "{curso}"
@model Front.Pages.DashboardModel

@using Front.Models;
@{
    ViewData["Title"] = "Dashboard do Curso";
}

<div id="contentToExport">
    <header class="linha welcome" style="justify-content: space-between; width: 100%; height: fit-content;">
        <div class="coluna" style="--gap: 10px">
            <span class="SubH1 corAzul">Dashboard do Curso</span>
            <div class="linha" style="align-items: center">
                <h1 class="corPreta40B">@Model.Cursos.nomeCurso</h1>
                <input type="checkbox" style="display: none" id="favCurso" @(FavoritoService.EhFavorito(Model.Cursos.nomeCurso) ? "checked" : "") onchange="toggleFavorito(this)" />
                <label for="favCurso">
                    <img id="imgFavCurso" src="@Url.Content(FavoritoService.EhFavorito(Model.Cursos.nomeCurso) ? "~/css/icons/estrela.svg" : "~/css/icons/estrela_inativa.svg")" height="20" />
                </label>
                <button id="exportDashboardToPdf" style="margin-left: 20px; padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Exportar possíveis desistentes para PDF
                </button>
            </div>
        </div>
    </header>

    <div class="dashboard coluna" style="--gap: 10px">
        <div class="ImputIA linha">
            <img src="~/css/icons/estrelaIA.svg" alt="ÍconeHome" width="18" height="18" />
            <input type="text" id="IaPergunta" name="nome" placeholder="Pergunte a inteligência Artifical!" />
            <a asp-page="/IaChatCurso" asp-route-cursoNome="@Model.Cursos.nomeCurso">Gerar</a>
        </div>

        <div class="abas" id="us_cont">
            <div class="spinner"><img src="~/css/icons/loadGif.gif" alt="Carregando..." width="40" /></div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const curso = "@Model.Cursos.nomeCurso";
        const container = document.getElementById("us_cont");

        const res = await fetch(`/Dashboard/${curso}?handler=Carregamento`);
        const html = await res.text();
        container.innerHTML = html;

        const scripts = container.querySelectorAll("script");
        scripts.forEach(oldScript => {
            const newScript = document.createElement("script");
            if (oldScript.src) {
                newScript.src = oldScript.src;
                newScript.async = false;
            } else {
                newScript.text = oldScript.textContent;
            }
            document.body.appendChild(newScript);
        });

        const exportButton = document.getElementById("exportDashboardToPdf");
        if (exportButton) {
            exportButton.addEventListener("click", () => {
                generatePdfFromPartial(curso);
            });
        }
    });

    async function generatePdfFromPartial(curso) {
        const { jsPDF } = window.jspdf;
        try {
            // Cria div escondida
            const hiddenDiv = document.createElement('div');
            hiddenDiv.style.position = 'absolute';
            hiddenDiv.style.opacity = '0';
            hiddenDiv.style.left = '0';
            hiddenDiv.style.top = '0';
            hiddenDiv.style.width = '210mm';  // largura A4
            hiddenDiv.style.height = 'auto';
            document.body.appendChild(hiddenDiv);

            const url = `/Dashboard/${curso}?handler=Relatorio`;
            console.log('Buscando URL:', url);
            const response = await fetch(url);
            console.log('Response status:', response.status);
            if (!response.ok) throw new Error('Erro ao carregar o relatório');

            const html = await response.text();
            console.log('HTML recebido:', html);

            hiddenDiv.innerHTML = html;

            // Aguarda meio segundo para garantir carregamento de estilos e imagens
            await new Promise(r => setTimeout(r, 500));

            const innerContent = hiddenDiv.querySelector('#relatorioParaPdf');
            if (!innerContent) throw new Error('Elemento #relatorioParaPdf não encontrado');

            console.log('Elemento relatorioParaPdf encontrado');

            const canvas = await html2canvas(innerContent, { scale: 2, useCORS: true });
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');

            const pageWidth = pdf.internal.pageSize.getWidth();
            const imgWidth = pageWidth - 20;
            const imgHeight = (canvas.height * imgWidth) / canvas.width;
            let position = 10;
            let heightLeft = imgHeight;

            pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
            heightLeft -= pdf.internal.pageSize.getHeight();

            while (heightLeft > 0) {
                pdf.addPage();
                position = heightLeft - imgHeight;
                pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                heightLeft -= pdf.internal.pageSize.getHeight();
            }

            pdf.save(`Relatorio_${curso}.pdf`);
        } catch (err) {
            console.error('Erro ao gerar o PDF:', err);
            alert('Erro ao gerar PDF: ' + err.message);
        } finally {
            const temp = document.querySelector('div[style*="opacity: 0"]');
            if (temp) document.body.removeChild(temp);
        }
    }

    // --------- FAVORITO ---------
    const iconeAtivo = '/css/icons/estrela.svg';
    const iconeInativo = '/css/icons/estrela_inativa.svg';

    async function toggleFavorito(checkbox) {
        const checked = checkbox.checked;
        const curso = @Html.Raw(Json.Serialize(Model.Cursos.nomeCurso));
        const img = document.getElementById('imgFavCurso');

        atualizarFavoritoVisual(checkbox, img);

        const url = checked
            ? `/api/favoritos/adicionar_curso?nomeCurso=${encodeURIComponent(curso)}`
            : `/api/favoritos/remover_curso?nomeCurso=${encodeURIComponent(curso)}`;

        try {
            const response = await fetch(url, { method: 'POST' });
            if (!response.ok) throw new Error();
        } catch {
            checkbox.checked = !checked;
            atualizarFavoritoVisual(checkbox, img);
            alert('Erro ao atualizar favoritos');
        }
    }

    function atualizarFavoritoVisual(checkbox, img) {
        img.src = checkbox.checked ? iconeAtivo : iconeInativo;
    }
</script>
