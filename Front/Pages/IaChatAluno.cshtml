@page "{userId}"
@model Front.Pages.IaChatAlunoModel
@{
    ViewData["Title"] = "Conversa sobre aluno";
    ViewData["OcultarSombra"] = true;
}

<header class="linha welcome" style="justify-content: space-between; width: 100%;">
    <div class="coluna" style="gap: 10px;">
        <span class="SubH1 corAzul">Aluno: @Model.UserId</span>
        <h1 class="corPreta40B">Inteligência Artificial</h1>
    </div>
</header>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 70vh;
        max-height: 70vh;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
    }

    .chat-bar {
        margin-top: 10px;
    }

    .msg {
        margin-bottom: 10px;
        white-space: pre-wrap; /* para quebrar linha no <pre> */
    }

        .msg.pergunta {
            background: #e0f0ff;
            padding: 10px;
            border-radius: 8px;
        }

        .msg.resposta {
            background: #f2f2f2;
            padding: 10px;
            border-radius: 8px;
        }

    button[disabled] {
        opacity: 0.6;
        cursor: wait;
    }
</style>

<div class="dashboard coluna" style="gap: 10px; height: 100%; flex-direction: column;">
    <div class="chat-container" id="chatContainer">
        @if (Model.Historico != null && Model.Historico.Any())
        {
            foreach (var msg in Model.Historico)
            {
                <div class="msg pergunta">
                    <strong>Você:</strong>
                    <pre>@msg.Pergunta</pre>
                </div>
                <div class="msg resposta" data-resposta="@msg.Resposta">
                    <strong>IA:</strong>
                    <pre class="ia-text"></pre>
                </div>
            }
        }
    </div>

    <div class="chat-bar">
        <form id="formChat" method="post">
            <div class="ImputIA linha" onclick="document.getElementById('IaPergunta').focus()">
                <img src="~/css/icons/estrelaIA.svg" alt="ÍconeHome" width="18" height="18" />
                <input asp-for="Prompt"
                       type="text"
                       id="IaPergunta"
                       placeholder="Pergunte à Inteligência Artificial!"
                       autocomplete="off"
                       required />
                <button id="btnEnviar" type="submit">Gerar</button>
            </div>
        </form>
    </div>
</div>

<script>
    // Mapeamento simples para emojis via texto (adicione mais conforme quiser)
    const emojiMap = {
        ':smile:': '😄',
        ':sad:': '😢',
        ':heart:': '❤️',
        ':thumbsup:': '👍',
        ':star:': '⭐',
        ':warning:': '⚠️'
    };

    function replaceEmojis(text) {
        return text.replace(/:\w+:/g, match => emojiMap[match] || match);
    }

    // Renderização simples de markdown (negrito, itálico, links)
    function renderMarkdown(text) {
        let t = text
            .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')  // **negrito**
            .replace(/\*(.+?)\*/g, '<em>$1</em>')              // *itálico*
            .replace(/\[(.+?)\]\((.+?)\)/g, '<a href="$2" target="_blank">$1</a>'); // [texto](url)
        return t;
    }

    // Animação de digitação letra a letra na resposta da IA
    async function typeWriter(element, text, delay = 20) {
        element.innerHTML = '';
        text = replaceEmojis(text);
        text = renderMarkdown(text);
        // Remove tags para digitar apenas texto puro
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = text;
        const plainText = tempDiv.textContent || tempDiv.innerText || '';
        for (let i = 0; i <= plainText.length; i++) {
            element.textContent = plainText.substring(0, i);
            await new Promise(r => setTimeout(r, delay));
        }
        // Agora renderiza markdown e emojis de verdade
        element.innerHTML = text;
    }

    window.onload = () => {
        const container = document.getElementById("chatContainer");
        if (container) {
            container.scrollTop = container.scrollHeight;
        }

        // Faz a animação para todas respostas carregadas
        document.querySelectorAll('.msg.resposta').forEach(div => {
            const pre = div.querySelector('.ia-text');
            const texto = div.getAttribute('data-resposta') || '';
            typeWriter(pre, texto, 10);
        });
    };

    const form = document.getElementById('formChat');
    const btnEnviar = document.getElementById('btnEnviar');
    const input = document.getElementById('IaPergunta');
    const chatContainer = document.getElementById('chatContainer');

    form.addEventListener('submit', e => {
        btnEnviar.disabled = true;
        btnEnviar.textContent = 'Carregando...';
    });
</script>
