@page
@model Front.Pages.CursosModel
@{
    ViewData["Title"] = "Curso";
}

<header class="linha welcome" style="justify-content: space-between">
    <div class="coluna" style="--gap: 10px">
        <span class="SubH1 corAzul">Bem Vindo(a)</span>
        <h1 class="corPreta40B">Cursos</h1>
    </div>
</header>

<div class="dashboard coluna" style="--gap: 20px">
    <div class="ImputIA linha">
        <img src="~/css/icons/Lupa.svg" width="18" height="18" />
        <input type="text" id="filtroCursos" onkeyup="filtrarCursos()" class="input-filtro" name="nome" placeholder="O que você procura?" />
        <button onclick="filtrarCursos()">Pesquisar</button>
    </div>

    <div class="linha" style="gap: 10px; align-items: center; margin-left: auto">
        <span class="subH4 corCinza70B">Ordenar por:</span>
        <div class="linha" style="flex-wrap: wrap; gap: 12px">
            <label class="op_filtro">
                <input type="radio" name="filtroAvancado" value="alfabetico" onchange="aplicarFiltroAvancado()" checked>
                <span>(A-Z)</span>
            </label>
            <label class="op_filtro">
                <input type="radio" name="filtroAvancado" value="maisAlunos" onchange="aplicarFiltroAvancado()">
                <span>Mais alunos</span>
            </label>
            <label class="op_filtro">
                <input type="radio" name="filtroAvancado" value="engajamentoAlto" onchange="aplicarFiltroAvancado()">
                <span>Engajamento alto</span>
            </label>
            <label class="op_filtro">
                <input type="radio" name="filtroAvancado" value="engajamentoMedio" onchange="aplicarFiltroAvancado()">
                <span>Engajamento médio</span>
            </label>
            <label class="op_filtro">
                <input type="radio" name="filtroAvancado" value="engajamentoBaixo" onchange="aplicarFiltroAvancado()">
                <span>Engajamento baixo</span>
            </label>
        </div>
    </div>

    <div class="flex grid" id="us_cont">
        <div class="spinner"><img src="~/css/icons/loadGif.gif" alt="Carregando..." width="40" /></div>
    </div>

    <div id="pagination-controls" style="text-align: center; margin-top: 20px;">
        <button id="loadMoreBtn" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background-color: #007bff; color: white; border: none; border-radius: 5px;">Carregar Mais Cursos</button>
    </div>
</div>

<script>
    let allCourses = []; // Armazena todos os cursos buscados
    let coursesPerPage = 10; // Quantidade de cursos por página
    let currentPage = 0; // Página atual

    document.addEventListener("DOMContentLoaded", async () => {
        const container = document.getElementById("us_cont");
        const loadMoreBtn = document.getElementById("loadMoreBtn");

        // Mostra um gif de carregamento enquanto os cards chegam
        container.innerHTML = `<div class="spinner"><img src="/css/icons/loadGif.gif" width="40" /></div>`;
        loadMoreBtn.style.display = 'none'; // Esconde o botão até os cursos serem carregados

        try {
            // Busca TODOS os cursos com quantidade de alunos
            const allCoursesRes = await fetch("/Cursos?handler=CursosComQuantAlunos");
            if (!allCoursesRes.ok) {
                throw new Error(`HTTP error! status: ${allCoursesRes.status}`);
            }
            allCourses = await allCoursesRes.json();
            container.innerHTML = ""; // Remove o loading

            // Exibe a primeira página de cursos
            displayCourses();

            // Mostra o botão "Carregar Mais" se houver mais cursos
            if (allCourses.length > coursesPerPage) {
                loadMoreBtn.style.display = 'block';
                loadMoreBtn.addEventListener('click', displayCourses);
            } else {
                loadMoreBtn.style.display = 'none';
            }

        } catch (error) {
            console.error("Erro ao carregar cursos iniciais:", error);
            container.innerHTML = `<p style="color: red;">Erro ao carregar os cursos. Por favor, tente novamente.</p>`;
            loadMoreBtn.style.display = 'none';
        }
    });

    // Função para exibir os cursos (paginação)
    function displayCourses() {
        const container = document.getElementById("us_cont");
        const loadMoreBtn = document.getElementById("loadMoreBtn");

        const startIndex = currentPage * coursesPerPage;
        const endIndex = startIndex + coursesPerPage;
        const coursesToDisplay = allCourses.slice(startIndex, endIndex);

        if (coursesToDisplay.length === 0) {
            loadMoreBtn.style.display = 'none'; // Esconde se não houver mais cursos
            return;
        }

        coursesToDisplay.forEach(curso => {
            const cardHtml = `
               <a href="/Dashboard/${encodeURIComponent(curso.nomeCurso)}"
                   class="card-curso"
                   style="text-decoration: none"
                   data-nome-curso="${encodeURIComponent(curso.nomeCurso)}"
                   data-quant-alunos="${curso.quantAlunos}">
                    <div class="flex QuadroCards_List coluna" style="gap: 24px">
                        <div class="linha" style="align-items: center">
                            <img src="/css/icons/caderno.svg" height="16px" />
                            <h4 class="corPreta40B">${curso.nomeCurso}</h4>
                        </div>
                        <div class="coluna" style="gap: 4px">
                            <span class="subH4 corCinza60B">Quant: ${curso.quantAlunos} Alunos</span>
                        </div>
                        <div class="linha engagement-container" data-course-name="${encodeURIComponent(curso.nomeCurso)}">
                            <div class="engagement-spinner">
                                <img src="/css/icons/loadGif.gif" alt="Carregando Engajamento..." width="20" />
                            </div>
                        </div>
                    </div>
                </a>
            `;
            container.insertAdjacentHTML("beforeend", cardHtml);

            // Chamada assíncrona para o engajamento de CADA curso
            fetch(`/Cursos?handler=EngajamentoCurso&nomeCurso=${encodeURIComponent(curso.nomeCurso)}`)
                .then(response => {
                    if (!response.ok) {
                        console.error(`Erro HTTP ao buscar engajamento para ${curso.nomeCurso}: ${response.status}`);
                        return { engagAlto: 0, engagMedio: 0, engagBaixo: 0 }; // Retorna valores padrão em caso de erro
                    }
                    return response.json();
                })
                .then(engagementData => {
                    const engagementContainer = document.querySelector(`.engagement-container[data-course-name="${encodeURIComponent(curso.nomeCurso)}"]`);
                    if (engagementContainer) {
                        engagementContainer.innerHTML = `
                            <div class="linha cur_porcVerd" style="gap: 8px">
                                <img src="/css/icons/rostofeliz.svg" height="16px" />
                                <span class="cur_porcFont">${engagementData.engagAlto}%</span>
                            </div>
                            <div class="linha cur_porcAzul" style="gap: 8px">
                                <img src="/css/icons/rostosememocao.svg" height="16px" />
                                <span class="cur_porcFont">${engagementData.engagMedio}%</span>
                            </div>
                            <div class="linha cur_porcVerm" style="gap: 8px">
                                <img src="/css/icons/rostotriste.svg" height="16px" />
                                <span class="cur_porcFont">${engagementData.engagBaixo}%</span>
                            </div>
                        `;
                    }
                })
                .catch(error => console.error(`Erro ao carregar engajamento para ${curso.nomeCurso}:`, error));
        });

        currentPage++; // Avança para a próxima página
        // Esconde o botão se todos os cursos já foram carregados
        if (endIndex >= allCourses.length) {
            loadMoreBtn.style.display = 'none';
        }
    }

    function aplicarFiltroAvancado() {
        const tipoFiltro = document.querySelector('input[name="filtroAvancado"]:checked')?.value;
        if (!tipoFiltro) return;

        const container = document.getElementById("us_cont");
        // Seleciona todos os cards visíveis atualmente para ordenação
        const cards = Array.from(container.querySelectorAll(".card-curso"));

        let getValue = (card, selector) =>
            parseFloat(card.querySelector(selector)?.innerText.replace('%', '').trim() || '0');

        switch (tipoFiltro) {
            case "alfabetico":
                cards.sort((a, b) =>
                    a.querySelector("h4").innerText.localeCompare(b.querySelector("h4").innerText)
                );
                break;
            case "maisAlunos":
                cards.sort((a, b) => {
                    const quantA = parseInt(a.dataset.quantAlunos || '0');
                    const quantB = parseInt(b.dataset.quantAlunos || '0');
                    return quantB - quantA;
                });
                break;
            case "engajamentoAlto":
                cards.sort((a, b) =>
                    getValue(b, ".cur_porcVerd span") - getValue(a, ".cur_porcVerd span")
                );
                break;
            case "engajamentoMedio":
                cards.sort((a, b) =>
                    getValue(b, ".cur_porcAzul span") - getValue(a, ".cur_porcAzul span")
                );
                break;
            case "engajamentoBaixo":
                cards.sort((a, b) =>
                    getValue(b, ".cur_porcVerm span") - getValue(a, ".cur_porcVerm span")
                );
                break;
        }
        // Limpa o container e adiciona os cards ordenados
        container.innerHTML = '';
        cards.forEach(card => container.appendChild(card));
    }

    function filtrarCursos() {
        const filtro = document.getElementById("filtroCursos").value.toLowerCase();
        const cards = document.querySelectorAll("#us_cont .card-curso");

        cards.forEach(card => {
            const nomeCurso = card.querySelector("h4").innerText.toLowerCase();
            card.style.display = nomeCurso.includes(filtro) ? "" : "none";
        });
    }
</script>