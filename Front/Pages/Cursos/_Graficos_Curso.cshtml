@model Front.Pages.DashboardModel
@using Front.Models;


    
        <input type="radio" name="aba" id="aba1" checked />
        <input type="radio" name="aba" id="aba2" />


        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Alunos</label>

            <div class="underline"></div>
        </div>

        <div class="conteudos">
            <!--DASHBOARD-->
            <div class="conteudo" id="conteudo1">
                <div class="linha alt_li" style="flex: 1; height: fit-content">

                    <!--CARDS DE ENGAJAMENTO-->
                    <div class="linha CardsEngajamento QuadroCards">
                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconVerde">
                                <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Alto</h5>
                                <h2 class="corVerde">
                                    @Model.EngajamentoAlto%
                                </h2>
                            </div>
                        </div>
                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconAzul">
                                <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Médio</h5>
                                <h2 class="corAzul">@Model.EngajamentoMedio%</h2>
                            </div>
                        </div>
                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconVermelho">
                                <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Baixo</h5>
                                <h2 class="corVermelha">@Model.EngajamentoBaixo%</h2>
                            </div>
                        </div>
                    </div>
                    <!--CARDS DA QUANTIDADE DE ALUNOS-->
                    <div class="linha QuantAlunos">
                        <div class="iconEscuro">
                            <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h4 class="corCinza100B">Alunos</h4>
                            <h2 class="corCinza100B">@Model.Cursos.usuarios.Count()</h2>
                        </div>
                    </div>


                </div>
                <div class="linha alt_li" style="flex: 1">

                    <!--GRÁFICOS-->
                    <div class="QuadroCards GraficoEvolucao linha" style="flex: 1; --gap: 16px">
                        <!--GRÁFICO DE BARRA-->
                        <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                            <div class="linha" style="--gap: 10px; align-items: center">
                                <img src="~/css/icons/graficos.svg" />
                                <h4 class="corPreta50B">Evolução</h4>
                            </div>
                            <canvas id="graficoLogs"></canvas>
                        </div>

                        <!--GRÁFICO DE BARRA-->
                        <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                            <div class="linha" style="--gap: 10px; align-items: center">
                                <img src="~/css/icons/GraficoPizza.svg" />
                                <h4 class="corPreta50B">Ações Realizadas</h4>
                            </div>
                            <div style="max-width: 400px; margin: auto; position: relative;">
                                <canvas id="graficoPizza" width="900" height="240"></canvas>
                            </div>
                        </div>
                    </div>

                    <!--TABELA DE POSSÍVEIS DESISTENTES-->
                    <div class="QuadroCards Unidades coluna">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/alunosDesistentes.svg" />
                            <h4 class="corPreta50B">Posíveis Desistentes</h4>
                        </div>
                        <div class="tabela-card">
                            <table>
                                <tbody id="tabela-alunos">
                                    @{
                                        int posicao = 1;
                                        
                                    }

                                    @foreach (var l in @Model.PossiveisDesistentes.OrderBy(l => l.Engajamento))
                                    {
                                        var engajamentoFormatado = l.Engajamento < 0
                                        ? $"{l.Engajamento.ToString("0.0")}%"
                                        : $"{l.Engajamento.ToString("0")}%";
                                        <tr class="linha @(posicao > 5 ? "escondido" : "")">
                                            <td style="width: 14px">@posicao</td>
                                            <td style="flex: 1">
                                        <a asp-page="/PerfilAluno" asp-route-userId="@l.UserId" asp-route-curso="@Model.Cursos.nomeCurso" asp-route-nome="@l.Name">@l.Name</a>
                                            </td>
                                            <td>@engajamentoFormatado</td>
                                        </tr>
                                        posicao++;
                                    }
                                </tbody>
                            </table>
                            @if (posicao > 5)
                            {
                                <div class="linha" style="flex-direction: row-reverse; margin-top: 16px"><button id="btn-carregar" onclick="carregarMais()">Ver mais</button></div>
                            }
                        </div>
                    </div>

                </div>
            </div>

            <!--TABELA DE ALUNOS-->
            <div class="conteudo" id="conteudo2">
                <div class="tabela-card QuadroCards" style="padding: 0; overflow: hidden">
                    <table id="tabelaAlunos">
                        <thead>
                            <tr>
                                <th>
                                    <span class="bot_tab">#</span>
                                </th>
                                <th>
                                    <button onclick="ordenarTabela(1)" class="bot_tab">
                                        Nome <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                                <th>
                                    <button onclick="ordenarTabela(2)" class="bot_tab">
                                        Último Acesso <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                                @{
                                    int ind = 3;
                                }
                                @foreach (var ac in new Acoes().ListarAcoes())
                                {
                                    <th>
                                        <button onclick="ordenarTabela(@ind)" class="bot_tab">
                                            @ac.nome_acao <img src="~/css/icons/Ordenar.svg" />
                                        </button>
                                    </th>
                                    ind++;
                                }
                                <th>
                                    <button onclick="ordenarTabela(@ind)" class="bot_tab">
                                        Engajamento <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                System.Globalization.CultureInfo.CurrentCulture = new System.Globalization.CultureInfo("pt-BR");
                                int i = 0;
                            }

                            @foreach (var al in Model.Cursos.usuarios.OrderBy(c => c.name))
                            {
                                i++;
                                <tr>
                                    <td>@i</td>
                                    <td>
                                        <a asp-page="/PerfilAluno"
                                           asp-route-userId="@al.user_id"
                                           asp-route-curso="@Model.Cursos.nomeCurso"
                                           asp-route-nome="@al.name">
                                            @al.name
                                        </a>
                                    </td>
                                    <td>
                                        @{
                                            var data = DateTime.Parse(al.user_lastaccess);
                                            var dataFormatada = $"Dia {data:dd} do mês de {data:MMMM} de {data:yyyy} às {data:HH:mm}";
                                        }
                                        @dataFormatada
                                    </td>
                                    @foreach (var ac in new Acoes().ListarAcoes())
                                    {
                                        <td>
                                            @Model.Cursos.Logs.Where(l => l.user_id == al.user_id && l.action == ac.action && l.target == ac.target && l.component == ac.component).Count()
                                        </td>
                                    }

                                    @{
                                        var engajamento = Model.AlunosEngajamento
                                        .FirstOrDefault(e => e.UserId == al.user_id)?.Engajamento;

                                        var engajamentoFormatado = engajamento.HasValue
                                        ? (engajamento < 1 ? $"{engajamento.Value:0.00}%" : $"{engajamento.Value:0}%")
                                        : "N/A";

                                        if (engajamento < 33)
                                        {
                                            <td class="corVermelha">@engajamentoFormatado</td>
                                        }
                                        else if (engajamento >= 33 && engajamento <= 66)
                                        {
                                            <td class="corAzul">@engajamentoFormatado</td>
                                        }
                                        else
                                        {
                                            <td class="corVerde">@engajamentoFormatado</td>
                                        }
                                    }
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    


<script>

    const coresClaro = ['#002899', '#0036cc', '#99b4ff', '#ccd9ff', '#e0eaff'];
    const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799', '#555555'];
    const toggle = document.getElementById('toggleTheme');
    const ctxBarras = document.getElementById('graficoLogs')?.getContext('2d');
    const ctxPizza = document.getElementById('graficoPizza')?.getContext('2d');
    const estadoOrdenacao = {};
    let exibidos = 10;
    let graficoBarras, graficoPizza;

    // --------- FUNÇÕES TABELA ---------
    function ordenarTabela(coluna) {
        const tabela = document.getElementById("tabelaAlunos");
        const tbody = tabela.querySelector("tbody");
        const linhas = Array.from(tbody.querySelectorAll("tr"));
        const crescente = estadoOrdenacao[coluna] ?? true;

        linhas.sort((a, b) => compararCelulas(a.children[coluna], b.children[coluna], crescente));
        linhas.forEach(linha => tbody.appendChild(linha));
        estadoOrdenacao[coluna] = !crescente;
    }

    function compararCelulas(a, b, crescente) {
        let valA = a.innerText.trim();
        let valB = b.innerText.trim();

        const isPercentual = valA.includes('%');
        const isDataCustom = valA.startsWith("Dia ");
        const isNumero = !isNaN(parseFloat(valA.replace(',', '.')));

        if (isPercentual) {
            valA = parseFloat(valA.replace('%', '').replace(',', '.')) || 0;
            valB = parseFloat(valB.replace('%', '').replace(',', '.')) || 0;
        } else if (isDataCustom) {
            valA = parseDataPersonalizada(valA);
            valB = parseDataPersonalizada(valB);
        } else if (isNumero) {
            valA = parseFloat(valA.replace(',', '.'));
            valB = parseFloat(valB.replace(',', '.'));
        }

        return (typeof valA === "number" && typeof valB === "number")
            ? (crescente ? valA - valB : valB - valA)
            : (crescente ? valA.localeCompare(valB) : valB.localeCompare(valA));
    }

    function parseDataPersonalizada(texto) {
        const regex = /Dia (\d{1,2}) do mês de (\w+) de (\d{4}) às (\d{2}):(\d{2})/;
        const meses = { 'janeiro': 0, 'fevereiro': 1, 'março': 2, 'abril': 3, 'maio': 4, 'junho': 5, 'julho': 6, 'agosto': 7, 'setembro': 8, 'outubro': 9, 'novembro': 10, 'dezembro': 11 };
        const match = texto.match(regex);
        if (!match) return 0;
        return new Date(+match[3], meses[match[2].toLowerCase()] ?? 0, +match[1], +match[4], +match[5]).getTime();
    }

    function carregarMais() {
        const linhas = document.querySelectorAll('.linha.escondido');
        for (let i = 0; i < 10 && i < linhas.length; i++) {
            linhas[i].classList.remove('escondido');
            exibidos++;
        }
        if (document.querySelectorAll('.linha.escondido').length === 0) {
            document.getElementById('btn-carregar').style.display = 'none';
        }
    }

    // --------- GRÁFICOS ---------
    function criarGraficos() {
        const isDarkMode = document.documentElement.classList.contains('dark');
        const cores = isDarkMode ? coresEscuro : coresClaro;
        const corTexto = '#8F98B2';

        const anos = @Html.Raw(Model.AnosJson);
        const semanas = @Html.Raw(Model.SemanasJson);
        const chartData = {
            labels: @Html.Raw(Model.LblJson),
            datasets: @Html.Raw(Model.DsJson)
        };

        chartData.datasets.forEach((ds, i) => {
            ds.backgroundColor = cores[i % cores.length];
            ds.borderWidth = 0;
        });

        const totaisPorSemana = chartData.labels.map((_, i) =>
            chartData.datasets.reduce((soma, ds) => soma + ds.data[i], 0)
        );

        if (ctxBarras) {
            if (graficoBarras) graficoBarras.destroy();
            graficoBarras = new Chart(ctxBarras, {
                type: 'bar',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            callbacks: {
                                title: ctx => `(${getDateRange(anos[ctx[0].dataIndex], semanas[ctx[0].dataIndex])})`,
                                label: ctx => {
                                    const valor = ctx.parsed.y;
                                    if (valor === 0) return null;
                                    const total = totaisPorSemana[ctx.dataIndex];
                                    const pct = total ? ((valor / total) * 100).toFixed(1) : 0;
                                    return `${ctx.dataset.label}: ${valor} (${pct}%)`;
                                }
                            }
                        },
                        legend: { display: false }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            ticks: { color: corTexto, font: { size: 10, weight: '500' } },
                            grid: { display: false }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                color: corTexto,
                                font: { size: 10, weight: '500' },
                                callback: val => {
                                    const max = Math.max(...totaisPorSemana);
                                    return max ? `${((val / max) * 100).toFixed(0)}%` : '0%';
                                }
                            },
                            grid: { display: false }
                        }
                    }
                }
            });
        }

        if (ctxPizza) {
            if (graficoPizza) graficoPizza.destroy();

            const totalAcoes = @Model.AcoesResumo.Sum(a => a.Quantidade);
            const totalLog = @Model.Cursos.Logs.Count;
            const quantidadeOutros = totalLog - totalAcoes;

            const acoesComOutros = [
    @foreach (var acao in Model.AcoesResumo)
    {
        @: { label: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(acao.Acao)), quantidade: @acao.Quantidade },
    }
            ];

            if (quantidadeOutros > 0) {
                acoesComOutros.push({ label: 'Outros', quantidade: quantidadeOutros });
            }

            const labelsPizza = acoesComOutros.map(a => a.label);
            const dadosPizza = acoesComOutros.map(a => a.quantidade);

            graficoPizza = new Chart(ctxPizza, {
                type: 'doughnut',
                data: {
                    labels: labelsPizza,
                    datasets: [{
                        data: dadosPizza,
                        backgroundColor: cores.slice(0, labelsPizza.length),
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    rotation: 270,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'rectRounded',
                                color: corTexto,
                                font: { size: 14, family: 'Inter' },
                                padding: 20,
                                boxWidth: 12,
                                generateLabels: function (chart) {
                                    const data = chart.data;
                                    const backgroundColors = data.datasets[0].backgroundColor;

                                    return data.labels.map((label, i) => ({
                                        text: `${label} (${data.datasets[0].data[i]})`,
                                        fillStyle: backgroundColors[i],
                                        strokeStyle: backgroundColors[i],
                                        index: i,
                                        fontColor: corTexto,
                                        pointStyle: 'rectRounded',
                                        boxWidth: 12,
                                        hidden: chart.getDatasetMeta(0).data[i]?.hidden ?? false,
                                    }));
                                }
                            },
                                onClick: (e, legendItem) => {
                                    const index = legendItem.index;

                                    // Toggle na pizza
                                    const metaPizza = graficoPizza.getDatasetMeta(0).data[index];
                                    metaPizza.hidden = !metaPizza.hidden;
                                    graficoPizza.update();

                                    // Toggle na barra
                                    const dsBarra = graficoBarras.data.datasets[index];
                                    if (dsBarra) {
                                        dsBarra.hidden = !dsBarra.hidden;
                                        graficoBarras.update();
                                    }
                                }
                        }
                    }
                },
                plugins: [{
                    id: 'centerText',
                    beforeDraw(chart) {
                        const { ctx, chartArea: { left, right, top, bottom } } = chart;
                        const x = (left + right) / 2;
                        const y = (top + bottom) / 2;
                        ctx.save();
                        ctx.font = 'bold 16px Inter';
                        ctx.fillStyle = corTexto;
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText(`${dadosPizza.reduce((a, b) => a + b, 0)} Ações`, x, y);
                        ctx.restore();
                    }
                }]
            });
        }
    }

    function getDateRange(year, week) {
        const base = new Date(year, 0, 1 + (week - 1) * 7);
        const dow = base.getDay();
        const start = new Date(base);
        start.setDate(base.getDate() - dow + (dow <= 4 ? 1 : 8));
        const end = new Date(start);
        end.setDate(start.getDate() + 6);
        const f = d => d.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
        return `${f(start)} à ${f(end)}`;
    }

    // --------- INICIALIZAÇÃO ---------
    if (localStorage.getItem('theme') === 'dark') {
        document.documentElement.classList.add('dark');
        if (toggle) toggle.checked = true;
    }

    criarGraficos();

    if (toggle) {
        toggle.addEventListener('change', function () {
            document.documentElement.classList.toggle('dark', this.checked);
            localStorage.setItem('theme', this.checked ? 'dark' : 'light');
            criarGraficos();
        });
    }
</script>

